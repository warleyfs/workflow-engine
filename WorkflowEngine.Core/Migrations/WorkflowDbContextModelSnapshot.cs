// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WorkflowEngine.Core.Data;

#nullable disable

namespace WorkflowEngine.Core.Migrations
{
    [DbContext(typeof(WorkflowDbContext))]
    partial class WorkflowDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("workflow")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WorkflowEngine.Core.Entities.StepDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Configuration")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("InputSchema")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("OutputSchema")
                        .HasColumnType("text");

                    b.Property<string>("StepType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("step_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("StepType")
                        .HasDatabaseName("ix_step_definitions_step_type");

                    b.HasIndex("Name", "StepType")
                        .IsUnique()
                        .HasDatabaseName("ix_step_definitions_name_type");

                    b.ToTable("step_definitions", "workflow");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.StepExecution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CompletedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<string>("InputData")
                        .HasColumnType("text");

                    b.Property<int>("MaxRetries")
                        .HasColumnType("integer");

                    b.Property<string>("OutputData")
                        .HasColumnType("text");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ScheduledTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("StartedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("WorkflowExecutionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkflowStepId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowExecutionId");

                    b.HasIndex("WorkflowStepId");

                    b.ToTable("step_executions", "workflow");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.WorkflowDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_workflow_definitions_created_at");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_workflow_definitions_is_active");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_workflow_definitions_name");

                    b.ToTable("workflow_definitions", "workflow");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.WorkflowExecution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CompletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_time");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("error_message");

                    b.Property<string>("InputData")
                        .HasColumnType("jsonb")
                        .HasColumnName("input_data");

                    b.Property<string>("OutputData")
                        .HasColumnType("jsonb")
                        .HasColumnName("output_data");

                    b.Property<DateTime?>("ScheduledTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_time");

                    b.Property<DateTime?>("StartedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_time");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("WorkflowDefinitionId")
                        .HasColumnType("uuid")
                        .HasColumnName("workflow_definition_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_workflow_executions_created_at");

                    b.HasIndex("ScheduledTime")
                        .HasDatabaseName("ix_workflow_executions_scheduled_time");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_workflow_executions_status");

                    b.HasIndex("WorkflowDefinitionId")
                        .HasDatabaseName("ix_workflow_executions_workflow_id");

                    b.ToTable("workflow_executions", "workflow");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.WorkflowStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConditionRules")
                        .HasColumnType("jsonb")
                        .HasColumnName("condition_rules");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("DelayMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("delay_minutes");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<string>("StepConfiguration")
                        .HasColumnType("jsonb")
                        .HasColumnName("step_configuration");

                    b.Property<Guid>("StepDefinitionId")
                        .HasColumnType("uuid")
                        .HasColumnName("step_definition_id");

                    b.Property<Guid>("WorkflowDefinitionId")
                        .HasColumnType("uuid")
                        .HasColumnName("workflow_definition_id");

                    b.HasKey("Id");

                    b.HasIndex("StepDefinitionId");

                    b.HasIndex("WorkflowDefinitionId")
                        .HasDatabaseName("ix_workflow_steps_workflow_id");

                    b.HasIndex("WorkflowDefinitionId", "Order")
                        .IsUnique()
                        .HasDatabaseName("ix_workflow_steps_workflow_order");

                    b.ToTable("workflow_steps", "workflow");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.StepExecution", b =>
                {
                    b.HasOne("WorkflowEngine.Core.Entities.WorkflowExecution", "WorkflowExecution")
                        .WithMany("StepExecutions")
                        .HasForeignKey("WorkflowExecutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowEngine.Core.Entities.WorkflowStep", "WorkflowStep")
                        .WithMany("Executions")
                        .HasForeignKey("WorkflowStepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WorkflowExecution");

                    b.Navigation("WorkflowStep");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.WorkflowExecution", b =>
                {
                    b.HasOne("WorkflowEngine.Core.Entities.WorkflowDefinition", "WorkflowDefinition")
                        .WithMany("Executions")
                        .HasForeignKey("WorkflowDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WorkflowDefinition");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.WorkflowStep", b =>
                {
                    b.HasOne("WorkflowEngine.Core.Entities.StepDefinition", "StepDefinition")
                        .WithMany("WorkflowSteps")
                        .HasForeignKey("StepDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkflowEngine.Core.Entities.WorkflowDefinition", "WorkflowDefinition")
                        .WithMany("Steps")
                        .HasForeignKey("WorkflowDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StepDefinition");

                    b.Navigation("WorkflowDefinition");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.StepDefinition", b =>
                {
                    b.Navigation("WorkflowSteps");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.WorkflowDefinition", b =>
                {
                    b.Navigation("Executions");

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.WorkflowExecution", b =>
                {
                    b.Navigation("StepExecutions");
                });

            modelBuilder.Entity("WorkflowEngine.Core.Entities.WorkflowStep", b =>
                {
                    b.Navigation("Executions");
                });
#pragma warning restore 612, 618
        }
    }
}
